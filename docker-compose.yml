version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sk8-spot-analyzer-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - ROBOFLOW_API_KEY=${ROBOFLOW_API_KEY}
      - ROBOFLOW_MODEL_ID=${ROBOFLOW_MODEL_ID}
      - ROBOFLOW_VERSION_NUMBER=${ROBOFLOW_VERSION_NUMBER}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - sk8-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({ host: 'localhost', port: 3000, path: '/api/v1/health', timeout: 2000 }, (res) => process.exit(res.statusCode === 200 ? 0 : 1)).end()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  redis:
    image: redis:alpine
    container_name: sk8-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - sk8-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional ML service for more complex image analysis
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: sk8-ml-service
    ports:
      - "5000:5000"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
    volumes:
      - ./ml-service/models:/app/models
    restart: unless-stopped
    networks:
      - sk8-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  sk8-network:
    driver: bridge

volumes:
  redis-data: 